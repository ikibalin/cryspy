import os
import numpy

from cryspy.A_functions_base.structure_factor import \
    calc_phase, \
    calc_f_nucl, \
    calc_structure_factor_tensor_ccs

na = numpy.newaxis

index_hkl = numpy.array([
    [0, 0, 2, 2, 1, 1, 1, 1, 0, 1, 3],
    [0, 2, 0, 2, 2, 2, 2, 2, 3, 3, 3],
    [2, 0, 0, 2, 3, 4, 5, 6, 3, 2, 3]], dtype=int)

symm_elems = numpy.array([
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [1, 1, 1, 1],
    [1,-1,-1, 1],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [1,-1, 1,-1],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [0, 0, 0, 0],
    [1,-1, 1,-1]], dtype=int)

unit_cell_parameters = numpy.array([
    7., 3., 15., 1.3, 1.7, 1.2], dtype=float)

atom_fract_xyz = numpy.array([
    [0., 0.5,  0.3],
    [0., 0.5,  0.2],
    [0., 0.5,  0.1]], dtype=float)

atom_occupancy = numpy.array([0.9, 1.1,  1.0], dtype=float)

b_iso = numpy.array([1.5, 0.5, -1.1], dtype=float)

beta = numpy.array([
    [1., 7.,  3.0],
    [2., 4.,  3.0],
    [3., 2.,  3.0],
    [.5, 0.7, 2.3],
    [.8, 0.7,-4.3],
    [.1, 0.2, 4.3]], dtype=float)

scat_length_neutron =  numpy.array([0.9+0.3j, 1.1,  0.34-0.2j], dtype=complex)

lande_factor = numpy.array([2.0, 0.8, 1.1], dtype=float)

kappa = numpy.array([1.1, 1.0, 0.9], dtype=float)

susceptibility = numpy.array([
    [1., 7.,  3.0],
    [0.3, 4.,  2.0],
    [3., 2.,  1.0],
    [.5, 0.7, 0.3],
    [.8, 0.7,-0.3],
    [.1, 0.2, 0.3]], dtype=float)


j0_parameters = numpy.array([
    [0.3902,   0.99895,   0.4332],
    [12.5078,  12.09652, 14.3553],
    [ 0.6324,   0.28854,  0.5857],
    [ 4.4574,   0.12914,  4.6077],
    [-0.15,     0.11425, -0.0382],
    [ 0.0343,  -0.22968,  0.1338],
    [ 0.1272,  -0.40685,  0.0179]], dtype=float)

j2_parameters = numpy.array([
    [ 1.70580e+00,  0.00000e+00,  1.90490e+00],
    [ 8.85950e+00,  0.00000e+00,  1.16444e+01],
    [ 1.14090e+00,  0.00000e+00,  1.31590e+00],
    [ 3.30860e+00,  0.00000e+00,  4.35740e+00],
    [ 1.47400e-01,  0.00000e+00,  3.14600e-01],
    [ 1.08990e+00,  0.00000e+00,  1.64530e+00],
    [-2.50000e-03,  0.00000e+00,  1.70000e-03]], dtype=float)

mag_atom_fract_xyz = atom_fract_xyz
mag_atom_occupancy = atom_occupancy
mag_atom_b_iso = b_iso
mag_atom_beta  = beta
full_symm_elems = symm_elems

phase = numpy.array(
[[[ 1.        +0.00000000e+00j,  1.        +0.00000000e+00j,
    1.        +0.00000000e+00j,  1.        +0.00000000e+00j],
  [ 1.        +2.44929360e-16j,  1.        -2.44929360e-16j,
    1.        +2.44929360e-16j,  1.        -2.44929360e-16j],
  [ 0.30901699-9.51056516e-01j,  0.30901699+9.51056516e-01j,
    0.30901699-9.51056516e-01j,  0.30901699+9.51056516e-01j]],
 [[ 1.        +0.00000000e+00j,  1.        +0.00000000e+00j,
    1.        +0.00000000e+00j,  1.        +0.00000000e+00j],
  [ 1.        +2.44929360e-16j,  1.        -2.44929360e-16j,
    1.        +2.44929360e-16j,  1.        -2.44929360e-16j],
  [-0.80901699-5.87785252e-01j, -0.80901699+5.87785252e-01j,
   -0.80901699-5.87785252e-01j, -0.80901699+5.87785252e-01j]],
 [[ 1.        +0.00000000e+00j,  1.        +0.00000000e+00j,
    1.        +0.00000000e+00j,  1.        +0.00000000e+00j],
  [ 1.        +2.44929360e-16j,  1.        -2.44929360e-16j,
    1.        -2.44929360e-16j,  1.        +2.44929360e-16j],
  [-0.80901699+5.87785252e-01j, -0.80901699-5.87785252e-01j,
   -0.80901699-5.87785252e-01j, -0.80901699+5.87785252e-01j]],
 [[ 1.        +0.00000000e+00j,  1.        +0.00000000e+00j,
    1.        +0.00000000e+00j,  1.        +0.00000000e+00j],
  [ 1.        +7.34788079e-16j,  1.        -7.34788079e-16j,
    1.        +2.44929360e-16j,  1.        -2.44929360e-16j],
  [ 0.30901699-9.51056516e-01j,  0.30901699+9.51056516e-01j,
    1.        -3.48786850e-16j,  1.        +3.48786850e-16j]],
 [[ 1.        +0.00000000e+00j,  1.        +0.00000000e+00j,
    1.        +0.00000000e+00j,  1.        +0.00000000e+00j],
  [ 1.        +7.34788079e-16j,  1.        -7.34788079e-16j,
    1.        +4.89858720e-16j,  1.        -4.89858720e-16j],
  [ 1.        +2.44929360e-16j,  1.        -2.44929360e-16j,
   -0.80901699-5.87785252e-01j, -0.80901699+5.87785252e-01j]],
 [[ 1.        +0.00000000e+00j,  1.        +0.00000000e+00j,
    1.        +0.00000000e+00j,  1.        +0.00000000e+00j],
  [-1.        -8.57252759e-16j, -1.        +8.57252759e-16j,
   -1.        -6.12323400e-16j, -1.        +6.12323400e-16j],
  [ 0.80901699-5.87785252e-01j,  0.80901699+5.87785252e-01j,
   -1.        -1.22464680e-16j, -1.        +1.22464680e-16j]],
 [[ 1.        +0.00000000e+00j,  1.        +0.00000000e+00j,
    1.        +0.00000000e+00j,  1.        +0.00000000e+00j],
  [ 1.        +9.79717439e-16j,  1.        -9.79717439e-16j,
    1.        +7.34788079e-16j,  1.        -7.34788079e-16j],
  [ 0.30901699-9.51056516e-01j,  0.30901699+9.51056516e-01j,
   -0.80901699+5.87785252e-01j, -0.80901699-5.87785252e-01j]],
 [[ 1.        +0.00000000e+00j,  1.        +0.00000000e+00j,
    1.        +0.00000000e+00j,  1.        +0.00000000e+00j],
  [-1.        -1.10218212e-15j, -1.        +1.10218212e-15j,
   -1.        -8.57252759e-16j, -1.        +8.57252759e-16j],
  [-0.30901699-9.51056516e-01j, -0.30901699+9.51056516e-01j,
   -0.30901699+9.51056516e-01j, -0.30901699-9.51056516e-01j]],
 [[ 1.        +0.00000000e+00j,  1.        +0.00000000e+00j,
    1.        +0.00000000e+00j,  1.        +0.00000000e+00j],
  [ 1.        +7.34788079e-16j,  1.        -7.34788079e-16j,
    1.        +7.34788079e-16j,  1.        -7.34788079e-16j],
  [ 0.80901699+5.87785252e-01j,  0.80901699-5.87785252e-01j,
    0.80901699+5.87785252e-01j,  0.80901699-5.87785252e-01j]],
 [[ 1.        +0.00000000e+00j,  1.        +0.00000000e+00j,
    1.        +0.00000000e+00j,  1.        +0.00000000e+00j],
  [ 1.        +7.34788079e-16j,  1.        -7.34788079e-16j,
    1.        +4.89858720e-16j,  1.        -4.89858720e-16j],
  [ 0.80901699-5.87785252e-01j,  0.80901699+5.87785252e-01j,
   -1.        +7.65713740e-16j, -1.        -7.65713740e-16j]],
 [[ 1.        +0.00000000e+00j,  1.        +0.00000000e+00j,
    1.        +0.00000000e+00j,  1.        +0.00000000e+00j],
  [-1.        -1.10218212e-15j, -1.        +1.10218212e-15j,
   -1.        -3.67394040e-16j, -1.        +3.67394040e-16j],
  [ 0.30901699+9.51056516e-01j,  0.30901699-9.51056516e-01j,
    1.        -1.39514740e-15j,  1.        +1.39514740e-15j]]], dtype=complex)

f_nucl = numpy.array(
    [ 4.12409569e-04+1.18775671e-07j,  2.10936692e-04+7.75742820e-05j,
      1.42810153e-02+4.76674271e-03j,  1.89508623e-07+6.31695409e-08j,
      2.13595809e-14+7.09030674e-15j, -8.08087800e-23+1.77993676e-23j,
      3.71642121e-30+1.10335003e-34j, -1.88219663e-39+1.68884879e-48j,
      2.43851035e-21+8.12803299e-22j,  1.35847184e-12+4.52823944e-13j,
      2.31924386e-15+7.73081286e-16j], dtype=complex)

structure_factor_tensor_ccs = numpy.array(
[[ 7.38176769e-04+0.j,  2.47919834e-05+0.j,  4.27476669e-03+0.j,
   3.88233452e-08+0.j,  4.36207572e-15+0.j, -5.56497888e-23+0.j,
   1.73930371e-30+0.j, -8.07383624e-40+0.j,  1.74730585e-22+0.j,
   1.23659285e-13+0.j,  2.29744021e-16+0.j],
 [ 0.00000000e+00+0.j,  0.00000000e+00+0.j,  0.00000000e+00+0.j,
  -2.56695060e-08+0.j, -2.86531665e-15+0.j,  8.95670652e-24+0.j,
  -4.20593858e-31+0.j,  1.95226745e-40+0.j,  0.00000000e+00+0.j,
  -8.17613748e-14+0.j, -1.51903848e-16+0.j],
 [ 0.00000000e+00+0.j,  0.00000000e+00+0.j,  0.00000000e+00+0.j,
  -4.60145409e-08+0.j, -5.11653225e-15+0.j, -1.31711880e-23+0.j,
   1.18475127e-32+0.j, -5.53554890e-42+0.j,  0.00000000e+00+0.j,
  -1.46563480e-13+0.j, -2.72299195e-16+0.j],
 [ 2.10283295e-04+0.j,  7.58696480e-06+0.j,  1.24828668e-03+0.j,
   1.25447709e-08+0.j,  1.41542865e-15+0.j, -2.67587969e-23+0.j,
   7.91984508e-31+0.j, -3.67642669e-40+0.j,  5.09990198e-23+0.j,
   3.99573071e-14+0.j,  7.42359034e-17+0.j],
 [ 2.97658877e-04+0.j, -5.28669028e-06+0.j, -9.36621171e-05+0.j,
  -1.23918479e-08+0.j, -1.36685465e-15+0.j, -1.98749390e-23+0.j,
   4.31010950e-31+0.j, -2.00092091e-40+0.j, -3.49099620e-24+0.j,
  -3.94699833e-14+0.j, -7.33309548e-17+0.j],
 [ 6.42525227e-05+0.j, -4.30216340e-05+0.j, -5.22311841e-03+0.j,
  -6.19807362e-08+0.j, -6.88862670e-15+0.j, -2.25602784e-23+0.j,
   1.42223038e-31+0.j, -6.60704407e-41+0.j, -2.12587698e-22+0.j,
  -1.97419373e-13+0.j, -3.66781983e-16+0.j],
 [-1.13490047e-04+0.j,  1.83960614e-06+0.j,  8.23396671e-05+0.j,
  -2.01657652e-08+0.j, -2.25805967e-15+0.j,  1.75189559e-23+0.j,
  -6.05079245e-31+0.j,  2.80872212e-40+0.j,  3.26839201e-24+0.j,
  -6.42310866e-14+0.j, -1.19334487e-16+0.j],
 [ 7.64213343e-05+0.j,  1.55410776e-05+0.j,  2.08666237e-03+0.j,
   2.00580914e-08+0.j,  2.23612442e-15+0.j, -2.81150879e-24+0.j,
   2.18937789e-31+0.j, -1.01618994e-40+0.j,  8.50469145e-23+0.j,
   6.38885752e-14+0.j,  1.18697308e-16+0.j],
 [ 1.87844592e-04+0.j,  8.73466319e-05+0.j,  1.15209600e-02+0.j,
   9.70540396e-08+0.j,  1.08023462e-14+0.j,  1.22362598e-23+0.j,
   3.82304070e-31+0.j, -1.77396548e-40+0.j,  4.69453483e-22+0.j,
   3.09134606e-13+0.j,  5.74334468e-16+0.j]], dtype=complex)


def test_calc_phase():
    res, dder = calc_phase(
        index_hkl[:, :, na, na], atom_fract_xyz[:, na, :, na], full_symm_elems[:, na, na, :], flag_atom_fract_xyz=True)
    print("res: ", res)
    print(phase)

    assert numpy.all(numpy.isclose(res, phase))


def test_calc_f_nucl():
    res, dder = calc_f_nucl(index_hkl, full_symm_elems, unit_cell_parameters, atom_fract_xyz,
        atom_occupancy, b_iso, beta, scat_length_neutron,
        flag_unit_cell_parameters= True,
        flag_atom_fract_xyz=True,
        flag_atom_occupancy=True,
        flag_b_iso=True,
        flag_beta=True)
    print("res: ", res)
    print(f_nucl)

    assert numpy.all(numpy.isclose(res, f_nucl))


def test_calc_structure_factor_tensor_ccs():
    res, dder = calc_structure_factor_tensor_ccs(index_hkl, full_symm_elems, unit_cell_parameters,
        mag_atom_fract_xyz, mag_atom_occupancy, mag_atom_b_iso, mag_atom_beta,
        lande_factor, kappa, susceptibility, j0_parameters, j2_parameters,
        flag_unit_cell_parameters=True,
        flag_mag_atom_fract_xyz=True,
        flag_mag_atom_occupancy=True,
        flag_mag_atom_b_iso=True,
        flag_mag_atom_beta=True,
        flag_lande_factor=True,
        flag_kappa=True,
        flag_susceptibility=True)
    print("res: ", res)
    print(structure_factor_tensor_ccs)

    assert numpy.all(numpy.isclose(res, structure_factor_tensor_ccs))


